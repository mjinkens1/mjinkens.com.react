module.exports = {
    env: {
        node: true,
        browser: true,
        es6: true,
    },
    parser: 'babel-eslint',
    extends: [
        'airbnb',
        'plugin:react/recommended',
        'plugin:jest/recommended',
        'plugin:jsx-a11y/recommended',
        'plugin:prettier/recommended',
    ],
    plugins: ['react'],
    rules: {
        'react/jsx-filename-extension': 0,
        'import/prefer-default-export': 0,
        'no-underscore-dangle': 0,
        camelcase: 0,
        'no-use-before-define': 0,
        'comma-dangle': 0,
        'prettier/prettier': ['error', { singleQuote: true, printWidth: 100 }],
        'no-unused-vars': [2, { args: 'after-used', argsIgnorePattern: '^_' }],
        'react/destructuring-assignment': 0,
        'react/prop-types': 0,
        'react/jsx-indent': 0,
        'react/jsx-indent-props': 0,
        'react/display-name': 0,
        'no-console': 0,
        'global-require': 0,
        'react/no-did-update-set-state': 0,
        'no-plusplus': 0,
        'consistent-return': 0,
        'array-callback-return': 0,
        'no-unused-expressions': 0, // See text input line 22
        'no-nested-ternary': 0,
        'react/sort-comp': [
            2,
            {
                order: ['constructor', 'static-methods', 'everything-else', 'lifecycle', 'render'],
                groups: {
                    constructor: ['constructor'],
                    lifecycle: [
                        'displayName',
                        'propTypes',
                        'contextTypes',
                        'childContextTypes',
                        'mixins',
                        'statics',
                        'defaultProps',
                        'getDefaultProps',
                        'getInitialState',
                        'getChildContext',
                        'getDerivedStateFromProps',
                        'componentWillMount',
                        'UNSAFE_componentWillMount',
                        'componentDidAppear',
                        'componentDidMount',
                        'componentWillReceiveProps',
                        'UNSAFE_componentWillReceiveProps',
                        'shouldComponentUpdate',
                        'componentWillUpdate',
                        'UNSAFE_componentWillUpdate',
                        'getSnapshotBeforeUpdate',
                        'componentDidUpdate',
                        'componentDidCatch',
                        'componentWillUnmount',
                    ],
                },
            },
        ],
    },
    globals: {
        fetch: true,
        __DEV__: true,
    },
    settings: {
        'import/resolver': {
            node: {
                extensions: ['.js', '.ios.js', '.android.js'],
            },
        },
    },
}
